syntax = "proto3";

package execution;

import "flow/entities/account.proto";
import "flow/entities/event.proto";

// ExecutionAPI is the API provided by the execution nodes.
service ExecutionAPI {

    // Ping is used to check if the access node is alive and healthy.
    rpc Ping (PingRequest) returns (PingResponse);

    // Accounts

    // GetAccount gets an account by address.
    rpc GetAccount (GetAccountRequest) returns (GetAccountResponse);

    // Scripts

    // ExecuteScriptAtLatestBlock executes a read-only Cadance script against the latest sealed execution state.
    rpc ExecuteScriptAtLatestBlock (ExecuteScriptAtLatestBlockRequest) returns (ExecuteScriptResponse);
    // ExecuteScriptAtBlockID executes a ready-only Cadence script against the execution state at the block with the given ID.
    rpc ExecuteScriptAtBlockID (ExecuteScriptAtBlockIDRequest) returns (ExecuteScriptResponse);
    // ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the execution state at the given block height.
    rpc ExecuteScriptAtBlockHeight (ExecuteScriptAtBlockHeightRequest) returns (ExecuteScriptResponse);

    // Events

    // GetEventsForBlockIDs retrieves events for all the specified block IDs that have the given type
    rpc GetEventsForBlockIDs (GetEventsForBlockIDsRequest) returns (EventsResponse);

    // GetEventsForBlockIDs retrieves events for all the specified block IDs that have the given type
    rpc GetEventsForBlockIDTransactionID (GetEventsForBlockIDTransactionIDRequest) returns (EventsResponse);
}

// Ping

message PingRequest {}

message PingResponse {}

// Accounts

message GetAccountRequest {
    bytes address = 1;
}

message GetAccountResponse {
    entities.Account account = 1;
}

// Scripts

message ExecuteScriptAtLatestBlockRequest {
    bytes script = 1;
}

message ExecuteScriptAtBlockIDRequest {
    bytes block_id = 1;
    bytes script = 2;
}

message ExecuteScriptAtBlockHeightRequest {
    uint64 block_height = 1;
    bytes script = 2;
}

message ExecuteScriptResponse {
    bytes value = 1;
}

// Events

message GetEventsForHeightRangeRequest {
    string type = 1;
    uint64 start_height = 2;
    uint64 end_height = 3;
}

message EventsResponse {
    repeated entities.Event events = 1;
}

message GetEventsForBlockIDsRequest {
    string type = 1;
    repeated bytes block_ids = 2;
}

message GetEventsForBlockIDTransactionIDRequest {
    bytes block_id = 1;
    bytes transaction_id = 2;
}

